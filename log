#! /usr/local/bin/node

/*
 * Parse a CSV timesheet from Tyme.
 */

// Parse command line arguments.
var program = require('commander');
program
  .version('0.0.1')
  .option('-f, --file <path>', 'The full path and filename to the CSV export.')
  .on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ log --file 20150511-20150517.csv');
    console.log();
  })
  .parse(process.argv);

// Output help if no arguments were supplied.
if (program.rawArgs.length <= 2) {
  program.help();
}

// Load configuration.
var configfile = __dirname + '/log.config.json';
var nconf = require('nconf');
nconf
  .use('file', { file: configfile })
  .load();

if (!Object.keys(nconf.get()).length) {
  console.error('Could not read from file %s.', logfile);
  console.log();
  process.exit(1);
}

var company = nconf.get('company');
var key = nconf.get('key');
var personId = nconf.get('person-id');
var map = nconf.get('map');

// Talk to teamwork API.
var request = require('request');

var base64 = new Buffer(key + ':xxx').toString('base64');

var json = {
  'time-entry': {
    'description': '',
    'person-id': '999',
    'date': '20140330',
    'time': '10:10',
    'hours': '1',
    'minutes': '15',
    'isbillable': '1'
  }
};

var host = 'https://' + company + '.teamworkpm.net';
var pathProject = '/projects/{project-id}/time_entries.json';
var pathTask = '/tasks/{task-id}/time_entries.json';

var options = {
	method: 'POST',
	encoding: 'utf8',
	followRedirect: true,
	headers: {
		'Authorization': 'BASIC ' + base64,
		'Content-Type': 'application/json'
	}
};

// Parse CSV file.
var file = program.file;
console.log('Parsing file %s...', file);

var timeEntries = {};

var csv = require('fast-csv');
csv
  .fromPath(file, {headers : true})
  .on('data', function(data) {
    var date = new Date(data['Date']).format();
    var time = data['Duration'].split(':');
    var task = data['Task'] + (data['Notes'] ? ': ' + data['Notes'] : '');

    if (map.project[data['Project']] == undefined) {
      console.error('No project ID was found for "%s". Add it to your log.config.json file.', data['Project']);
      process.exit(1);
    }

    if (timeEntries[map.project[data['Project']]] == undefined) {
      timeEntries[map.project[data['Project']]] = {};
    }
    if (timeEntries[map.project[data['Project']]][task] == undefined) {
      timeEntries[map.project[data['Project']]][task] = {};
    }
    if (timeEntries[map.project[data['Project']]][task][date] == undefined) {
      timeEntries[map.project[data['Project']]][task][date] = {
        'project-id': map.project[data['Project']],
        'description': task,
        'person-id': personId,
        'date': date,
        // 'time': '10:10',
        'hours': +parseInt(time[0]),
        'minutes': +parseInt(time[1]),
        'isbillable': true
      }
    }
    else {
      // Update hours & minutes only.
      timeEntries[map.project[data['Project']]][task][date].hours += parseInt(time[0]);
      timeEntries[map.project[data['Project']]][task][date].minutes += parseInt(time[1]);

      // Split minutes into hours and minutes.
      var minutes = timeEntries[map.project[data['Project']]][task][date].minutes;
      if (minutes >= 60) {
        var hours = Math.floor(minutes / 60);
        minutes = minutes % 60;

        timeEntries[map.project[data['Project']]][task][date].hours += hours;
        timeEntries[map.project[data['Project']]][task][date].minutes = minutes;
      }
    }
  })
  .on('end', function(){
    console.log('Parsing completed.');
    console.log();
    console.log('Logging time...');

    for (projectId in timeEntries)  {
      for (task in timeEntries[projectId])  {
        for (date in timeEntries[projectId][task])  {
          var timeEntry = timeEntries[projectId][task][date];
          var json = {
            'time-entry': timeEntry
          };

          if (map.task[timeEntry.description] == undefined) {
            // No teamwork task associated with this time entry.
            options.uri = host + pathProject.replace('{project-id}', projectId);
          }
          else {
            // No teamwork task associated with this time entry.
            options.uri = host + pathTask.replace('{task-id}', map.task[timeEntry.description]);
          }
          options.json = json;

          console.log('Logging %s:%s hrs for task %s.', timeEntry.hours, (timeEntry.minutes < 10 ? '0' : '') + timeEntry.minutes, timeEntry.description);

          request(options, function (error, response, body) {
            if (error) {
              return console.log('ERROR:', error);
            }
            else if (response.statusCode < 200 || response.statusCode > 201) {
              console.log('STATUS ERROR:', response.statusCode);
              return console.log(body);
            }
            if (response.statusCode == 200) {
              // Updated time entry.
            }
            else if (response.statusCode == 201) {
              // Created new time entry.
            }
          });
        }
      }
    }
    console.log('Logging completed.');
    console.log();
  })
  .on('error', function(error) {
    // @todo This doesn't get triggered on file open errors.
    console.error('Could not read from file %s.', file);
    console.error(error.message);
    console.log();
    process.exit(1);
  });


// Add custom date format.
Date.prototype.format = function () {
  var datestring = '';
  datestring += this.getFullYear();
  datestring += (this.getMonth() < 9 ? '0' : '') + (this.getMonth() + 1);
  datestring += (this.getDate() < 10 ? '0' : '') + this.getDate();

  return datestring;
}
