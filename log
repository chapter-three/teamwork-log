#! /usr/local/bin/node

/*
 * Parse a CSV timesheet from Tyme.
 */

function isNumeric(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
}

// Add custom date format.
Date.prototype.format = function () {
  var datestring = '';
  datestring += this.getFullYear();
  datestring += (this.getMonth() < 9 ? '0' : '') + (this.getMonth() + 1);
  datestring += (this.getDate() < 10 ? '0' : '') + this.getDate();

  return datestring;
};

var Log = Log || {};

/*
 * Returns a configuration object.
 */
Log.getConfig = function(configfile) {
  var nconf = require('nconf');
  nconf
    .use('file', { file: configfile })
    .load();

  if (!Object.keys(nconf.get()).length) {
    console.error('Could not read from file %s.', logfile);
    console.log();
    process.exit(1001);
  }

  var config = nconf.get();
  var project;

  // Allow simple format in config, but convert to full format before use.
  for (project in config.map.project) {
    if (!(config.map.project[project] instanceof Object)) {
      config.map.project[project] = {
        'id': config.map.project[project],
        'task': {}
      }
    }
  }

  return config;
};

/*
 * Validates data from CSV.
 */
Log.validateData = function(data) {
  // Ensure all fields exist.
  var hasError = false;
  var columns = ['date', 'notes', 'project', 'time'];

  for (var i = 0, tot = columns.length; i < tot; i++) {
    var column = columns[i];
    if (data[config.map.csv[column]] === undefined) {
      console.error('Column %s (%s) does not exist in the CSV file.', config.map.csv[column], column);
      hasError = true;
    }
  }
  if (hasError) {
    process.exit(1002);
  }

  if (config.map.project[data[config.map.csv.project]] === undefined) {
    console.error('No project ID was found for "%s". Add it to your log.config.json file.', data[config.map.csv.project]);
    process.exit(1003);
  }

  return true;
};

/*
 * Parses data from CSV.
 */
Log.parseData = function(data, timeEntries) {
  var date = new Date(data[config.map.csv.date]).format();
  var notes = data[config.map.csv.notes];
  var project = data[config.map.csv.project];
  var task = data[config.map.csv.task];
  var time = data[config.map.csv.time].split(':');

  var description = '';
  if (task) {
    if (notes) description = task + ': ' + notes;
    else description = task;
  }
  else if (notes) description = notes;

  var configProject = config.map.project[project];

  if (timeEntries[project] === undefined) {
    timeEntries[project] = {};
  }
  if (timeEntries[project][description] === undefined) {
    timeEntries[project][description] = {};
  }
  if (timeEntries[project][description][date] === undefined) {
    timeEntries[project][description][date] = {
      json: {
        'project-id': configProject.id,
        'description': description,
        'person-id': config.personId,
        'date': date,
        // 'time': '10:10',
        'hours': +parseInt(time[0]),
        'minutes': +parseInt(time[1]),
        'isbillable': true
      },
      data: {
        project: project,
        projectId: configProject.id,
        task: task,
        taskId: configProject.task[task] ? configProject.task[task] : null
      }
    }
  }
  else {
    // Update hours & minutes only.
    timeEntries[project][description][date].json.hours += parseInt(time[0]);
    timeEntries[project][description][date].json.minutes += parseInt(time[1]);

    // Split minutes into hours and minutes.
    var minutes = timeEntries[project][description][date].json.minutes;
    if (minutes >= 60) {
      var hours = Math.floor(minutes / 60);
      minutes = minutes % 60;

      timeEntries[project][description][date].json.hours += hours;
      timeEntries[project][description][date].json.minutes = minutes;
    }
  }
};

/*
 * Logs time entries.
 */
Log.logTime = function(timeEntries) {
  console.log('Logging time...');

  // Talk to teamwork API.
  var request = require('request');

  var base64 = new Buffer(config.key + ':xxx').toString('base64');

  var host = 'https://' + config.company + '.teamworkpm.net';
  var pathProject = '/projects/{project-id}/time_entries.json';
  var pathTask = '/tasks/{task-id}/time_entries.json';

  var options = {
    method: 'POST',
    encoding: 'utf8',
    followRedirect: true,
    headers: {
      'Authorization': 'BASIC ' + base64,
      'Content-Type': 'application/json'
    }
  };

  var projectId,
    description,
    date,
    descriptionArray;

  for (projectId in timeEntries)  {
    for (description in timeEntries[projectId])  {
      for (date in timeEntries[projectId][description])  {
        var timeEntry = timeEntries[projectId][description][date];

        if (timeEntry.data.taskId === null) {
          // See if the task description includes a taskId.
          descriptionArray = description.split(' - ');
          if (descriptionArray.length > 1 && isNumeric(descriptionArray[0].trim())) {
            // A teamwork task is associated with this time entry.
            options.uri = host + pathTask.replace('{task-id}', descriptionArray[0].trim());
          }
          else {
            // No teamwork task associated with this time entry.
            options.uri = host + pathProject.replace('{project-id}', timeEntry.data.projectId);
          }
        }
        else {
          // A teamwork task is associated with this time entry.
          options.uri = host + pathTask.replace('{task-id}', timeEntry.data.taskId);
        }
        options.json = {
          'time-entry': timeEntry.json
        };

        console.log('Logging %s:%s hrs for project %s, description: "%s".', timeEntry.json.hours, (timeEntry.json.minutes < 10 ? '0' : '') + timeEntry.json.minutes, timeEntry.data.project, timeEntry.json.description);

        if (!program.simulate) {
          request(options, function (error, response, body) {
            if (error) {
              return console.log('ERROR:', error);
            }
            else if (response.statusCode < 200 || response.statusCode > 201) {
              console.log('STATUS ERROR:', response.statusCode);
              return console.log(body);
            }
            if (response.statusCode == 200) {
              // Updated time entry.
            }
            else if (response.statusCode == 201) {
              // Created new time entry.
            }
          });
        }
      }
    }
  }
  console.log('Logging completed.');
  console.log();
};


// Parse command line arguments.
var program = require('commander');
program
  .version('0.0.1')
  .option('-f, --file <path>', 'The full path and filename to the CSV export.')
  .option('-s, --simulate', 'Simulate logging time.')
  .on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ log --file 20150511-20150517.csv');
    console.log();
  })
  .parse(process.argv);

// Output help if no arguments were supplied.
if (program.rawArgs.length <= 2) {
  program.help();
}

// Check if we're running in simulated mode.
if (program.simulate) {
  console.log('Running in simulated mode.');
  console.log();
}

// Load configuration data.
var config = Log.getConfig(__dirname + '/log.config.json');

// Prepare time entries.
var timeEntries = {};

// Parse CSV file.
var file = program.file;
console.log('Parsing file %s...', file);

var csv = require('fast-csv');
csv
  .fromPath(file, {headers : true})
  .validate(Log.validateData)
  .on('data', function(data) {
    Log.parseData(data, timeEntries);
  })
  .on('end', function() {
    console.log('Parsing completed.');
    console.log();

    Log.logTime(timeEntries);
  })
  .on('error', function(error) {
    // @todo This doesn't get triggered on file open errors.
    console.error('Could not read from file %s.', file);
    console.error(error.message);
    console.log();
    process.exit(1004);
  });
